<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mmorpg on Marsettler</title>
    <link>https://marsettler.com/tags/mmorpg/</link>
    <description>Recent content in mmorpg on Marsettler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://marsettler.com/tags/mmorpg/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>게임 서버 아키텍처</title>
      <link>https://marsettler.com/game-server-architecture/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/game-server-architecture/</guid>
      <description>&lt;p&gt;아직 작성중입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;heading&#34;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;게임 서버 아키텍처에 관한 이야기를 합니다. 대부분의 내용은 MMORPG에 특화되어 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;-&#34;&gt;게임 서버&lt;/h2&gt;
&lt;p&gt;아주 간단한 게임 서버를 생각해봅시다. 아래처럼 클라이언트와 서버가 아래와 같이 연결되어 있습니다.&lt;/p&gt;
&lt;div class=&#34;mermaid&#34; style=&#34;text-align:center;&#34;&gt;
  
flowchart LR
    클라이언트1 &lt;--&gt; 서버
    클라이언트2 &lt;--&gt; 서버
    클라이언트3 &lt;--&gt; 서버

&lt;/div&gt;

&lt;p&gt;이처럼 다수의 클라이언트들이 서버를 통해서 상호작용합니다. 지금은 서버가 처리해야 할 클라이언트도 많지 않고, 사용자의 데이터를 영구적으로 저장하는 것도 고려되지 않았는데 하나씩 더 살펴봅시다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>거대한 단일 MMORPG 서버</title>
      <link>https://marsettler.com/huge-single-mmorpg-server/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/huge-single-mmorpg-server/</guid>
      <description>&lt;p&gt;2019년 9월 21일에 &lt;a href=&#34;https://cafe.naver.com/devrookie/9621&#34;&gt;데브루키 521회&lt;/a&gt;에서 발표한 자료입니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>